import test from 'node:test'
import { equal } from 'node:assert/strict'
import * as uint64 from './uint64.ts'

test('flip', (t) => {
  const i = 0b0000000000000000000000000000000000000000000000000000000000000000n
  equal(uint64.flip(i, 0), 0b0000000000000000000000000000000000000000000000000000000000000001n)
  equal(uint64.flip(i, 1), 0b0000000000000000000000000000000000000000000000000000000000000010n)
  equal(uint64.flip(i, 7), 0b0000000000000000000000000000000000000000000000000000000010000000n)
  equal(uint64.flip(i, 9), 0b0000000000000000000000000000000000000000000000000000001000000000n)
  equal(uint64.flip(i, 61), 0b0010000000000000000000000000000000000000000000000000000000000000n)
  equal(uint64.flip(i, 63), 0b1000000000000000000000000000000000000000000000000000000000000000n)
})

test('byte', (t) => {
  const i = 0b1111111101111111001111110001111100001111000001110000001100000001n
  equal(uint64.byte(i, 0), 0b11111111)
  equal(uint64.byte(i, 1), 0b01111111)
  equal(uint64.byte(i, 2), 0b00111111)
  equal(uint64.byte(i, 3), 0b00011111)
  equal(uint64.byte(i, 4), 0b00001111)
  equal(uint64.byte(i, 5), 0b00000111)
  equal(uint64.byte(i, 6), 0b00000011)
  equal(uint64.byte(i, 7), 0b00000001)
})

test('trailingZeros', (t) => {
  equal(uint64.trailingZeros(0b0000000000000000000000000000000000000000000000000000000000000001n), 0)
  equal(uint64.trailingZeros(0b0000000000000000000000000000000000000000000000000000000000000010n), 1)
  equal(uint64.trailingZeros(0b0000000000000000000000000000000000000000000000000000000000000100n), 2)
  equal(uint64.trailingZeros(0b0000000000000000000000000000000000000000000000000000000000001000n), 3)
  equal(uint64.trailingZeros(0b0000000000000000000000000000000000000000000000000000000000010000n), 4)
  equal(uint64.trailingZeros(0b0000000000000000000000000000000000000000000000000000000000100000n), 5)
  equal(uint64.trailingZeros(0b0000000000000000000000000000000000000000000000000000000001000000n), 6)
  equal(uint64.trailingZeros(0b0000000000000000000000000000000000000000000000000000000010000000n), 7)
  equal(uint64.trailingZeros(0b0000000000000000000000000000000000000000000000000000000100000000n), 8)
  equal(uint64.trailingZeros(0b0000000000000000000000000000000010000000000000000000000000000000n), 31)
  equal(uint64.trailingZeros(0b0000000000000000000000000000000001000000000000000000000000000000n), 30)
  equal(uint64.trailingZeros(0b0000000000000000000000000000000000100000000000000000000000000000n), 29)
  equal(uint64.trailingZeros(0b0000000000000000000000000000000000010000000000000000000000000000n), 28)
  equal(uint64.trailingZeros(0b0000000000000000000000000000000000001000000000000000000000000000n), 27)
  equal(uint64.trailingZeros(0b0000000000000000000000000000000000000100000000000000000000000000n), 26)
  equal(uint64.trailingZeros(0b0000000000000000000000000000000000000010000000000000000000000000n), 25)
  equal(uint64.trailingZeros(0b0000000000000000000000000000000000000001000000000000000000000000n), 24)
  equal(uint64.trailingZeros(0b0000000000000000000000000000000000000000000000000000000000000000n), 64)
})

test('setTrailingBits', (t) => {
  const i = 0b0000000000000000000000000000000000000000000000000000000000000000n
  equal(uint64.setTrailingBits(i, 0, 1), 0b0000000000000000000000000000000000000000000000000000000000000001n)
  equal(uint64.setTrailingBits(i, 1, 1), 0b0000000000000000000000000000000000000000000000000000000000000011n)
  equal(uint64.setTrailingBits(i, 2, 1), 0b0000000000000000000000000000000000000000000000000000000000000111n)
  equal(uint64.setTrailingBits(i, 5, 1), 0b0000000000000000000000000000000000000000000000000000000000111111n)
  equal(uint64.setTrailingBits(i, 63, 1), 0b1111111111111111111111111111111111111111111111111111111111111111n)
})

test('setBit', (t) => {
  equal(uint64.set(0b00000000000000000000000000000000n, 0, 1), 0b00000000000000000000000000000001n)
  equal(uint64.set(0b00000000000000000000000000000000n, 1, 1), 0b00000000000000000000000000000010n)
  equal(uint64.set(0b00000000000000000000000000000000n, 9, 1), 0b00000000000000000000001000000000n)
  equal(uint64.set(0b00000000000000000000000000000000n, 17, 1), 0b00000000000000100000000000000000n)
  equal(uint64.set(0b00000000000000000000000000000000n, 25, 1), 0b00000010000000000000000000000000n)
  equal(uint64.set(0b00000000000000000000000000000000n, 31, 1), 0b10000000000000000000000000000000n)
  equal(uint64.set(0b11111111111111111111111111111111n, 0, 0), 0b11111111111111111111111111111110n)
  equal(uint64.set(0b11111111111111111111111111111111n, 1, 0), 0b11111111111111111111111111111101n)
  equal(uint64.set(0b11111111111111111111111111111111n, 9, 0), 0b11111111111111111111110111111111n)
  equal(uint64.set(0b11111111111111111111111111111111n, 17, 0), 0b11111111111111011111111111111111n)
  equal(uint64.set(0b11111111111111111111111111111111n, 25, 0), 0b11111101111111111111111111111111n)
  equal(uint64.set(0b11111111111111111111111111111111n, 31, 0), 0b01111111111111111111111111111111n)
})
