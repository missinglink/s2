import test from 'node:test'
import { equal } from 'node:assert/strict'
import * as bits from './bits.ts'

test('findLSBSetNonZero64', t => {
  equal(bits.findLSBSetNonZero64(0b0000000000000000000000000000000000000000000000000000000000000001n), 0)
  equal(bits.findLSBSetNonZero64(0b0000000000000000000000000000000000000000000000000000000000000010n), 1)
  equal(bits.findLSBSetNonZero64(0b0000000000000000000000000000000000000000000000000000000000000100n), 2)
  equal(bits.findLSBSetNonZero64(0b0000000000000000000000000000000000000000000000000000000000001000n), 3)
  equal(bits.findLSBSetNonZero64(0b0000000000000000000000000000000000000000100000000000000000000000n), 23)
  equal(bits.findLSBSetNonZero64(0b0000000000000000000000000000000000000001000000000000000000000000n), 24)
  equal(bits.findLSBSetNonZero64(0b0000000000000000000000000000000000000010000000000000000000000000n), 25)
  equal(bits.findLSBSetNonZero64(0b0000000000000000000000000100000000000000000000000000000000000000n), 38)
  equal(bits.findLSBSetNonZero64(0b0000000000000000000000001000000000000000000000000000000000000000n), 39)
  equal(bits.findLSBSetNonZero64(0b0000000000000000000000010000000000000000000000000000000000000000n), 40)
  equal(bits.findLSBSetNonZero64(0b0000000010000000000000000000000000000000000000000000000000000000n), 55)
  equal(bits.findLSBSetNonZero64(0b0000000100000000000000000000000000000000000000000000000000000000n), 56)
  equal(bits.findLSBSetNonZero64(0b0000001000000000000000000000000000000000000000000000000000000000n), 57)
  equal(bits.findLSBSetNonZero64(0b1000000000000000000000000000000000000000000000000000000000000000n), 63)
  equal(bits.findLSBSetNonZero64(0b0000000000000000000000000000000000000000000000000000000000000000n), 64)
  equal(bits.findLSBSetNonZero64(0b1000000000000000000000000000000000000000000000000000000000000000000n), 64)
})
